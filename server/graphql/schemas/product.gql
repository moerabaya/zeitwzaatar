type Product {
  id: ID
  name: String
  description: String
  price: Float
  soldout: Soldout
  stores: [Store]!
  categories: [Category]
}

type Store {
  store: String
}

input ProductFilter {
  category: ID
  name: String
  id: ID
  # Add more filter fields as needed
}

type Query {
  getProduct(id: ID): Product
  products(filter: ProductFilter): [Product]
  getAllProducts: [Product]
  getProductsByName(name: String): [Product]
}

input StoreInput {
  store: String
}

input ProductInput {
  id: ID
  name: String
  description: String
  price: Float
  soldout: Soldout
  stores: [StoreInput]
  categories: [String]
}

enum Soldout {
  SOLDOUT
  ONSALE
}

type Mutation {
  createProduct(input: ProductInput): Product
  updateProduct(input: ProductInput): Product
  deleteProduct(id: ID!): String
}
